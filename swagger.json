{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "go-infra API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Justin Trahan",
      "email": "test@trahan.dev"
    },
    "license": {
      "name": "N/A"
    },
    "version": "v1.0.7"
  },
  "host": "infra.trahan.dev",
  "paths": {
    "/create/permission": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "createAppPermission"
        ],
        "summary": "Create New App Permission.",
        "operationId": "idOfCreateAppPermission",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAppPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateAppPermissionResponse"
          }
        }
      }
    },
    "/create/role": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "createUserRole"
        ],
        "summary": "Create New User Role.",
        "operationId": "idOfCreateUserRole",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUserRoleResponse"
          }
        }
      }
    },
    "/create/user": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "createuser"
        ],
        "summary": "Create a new user.",
        "operationId": "idOfcreateUserEndpoint",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateNewUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserDao"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Login a user and return token.",
        "operationId": "idOfloginEndpoint",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuthToken"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns all App Permissions",
        "tags": [
          "getAllAppPermissions"
        ],
        "operationId": "idOfgetAllAppPermissionsEndpoint",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllAppPermissionsResponse"
          }
        }
      }
    },
    "/renew": {
      "post": {
        "description": "Request/Renew ssl certificate via cloudflare letsencrypt. Uses DNS Challenge",
        "produces": [
          "application/json",
          "application/zip"
        ],
        "tags": [
          "renew"
        ],
        "operationId": "idOfrenewEndpoint",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CertDnsRenewReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CertificateData"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "getAllUserRoles"
        ],
        "summary": "Returns all active User Roles.",
        "operationId": "idOfgetAllRolesEndpoint",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllRolesResponse"
          }
        }
      }
    },
    "/roles/permission": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "createRolePermissionMapping"
        ],
        "summary": "Map App Permission to User Role.",
        "operationId": "idOfCreateRolePermissionMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRolePermissionMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateRolePermissionMapptingResponse"
          }
        }
      }
    },
    "/token/refresh": {
      "post": {
        "tags": [
          "tokenRefresh"
        ],
        "summary": "Refresh accessTokens andreturn to client.",
        "operationId": "idOftokenRefreshEndpoint",
        "responses": {
          "200": {
            "$ref": "#/responses/AuthToken"
          }
        }
      }
    },
    "/update/userpass": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "updateUserPw"
        ],
        "summary": "Update user password.",
        "operationId": "idOfUpdateUserPw",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPasswordUpdateResponse"
          }
        }
      }
    },
    "/user/delete": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "SoftDeleteUserHandler"
        ],
        "summary": "Soft Delete User by id.",
        "operationId": "idOfSoftDeleteUserById",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SoftDeleteUserByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftDeleteUserByIdResponse"
          }
        }
      }
    },
    "/user/disable": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "disableUser"
        ],
        "summary": "Disable specified target User Id.",
        "operationId": "idOfDisableUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DisableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateUserRoleResponse"
          }
        }
      }
    },
    "/user/enable": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "enableUser"
        ],
        "summary": "Enable specified target User Id.",
        "operationId": "idOfEnableUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          }
        }
      }
    },
    "/user/role": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update User Role Mapping",
        "tags": [
          "updateUserRole"
        ],
        "operationId": "idOfUpdateUserRole",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateUserRoleMappingResponse"
          }
        }
      }
    },
    "/user/role/remove": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Disable User Role Mapping",
        "tags": [
          "disableUserRoleMapping"
        ],
        "operationId": "idOfdisableUserRoleMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "getallusers"
        ],
        "summary": "Returns all active users.",
        "operationId": "idOfgetAllUsersEndpoint",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllUsersResponse"
          }
        }
      }
    },
    "/users/{ID}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "getUserById"
        ],
        "summary": "Returns User Info for the user id specified in URL users.",
        "operationId": "idOfgetUserByIdEndpoint",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserByIdResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "CertDnsRenewReq": {
      "type": "object",
      "properties": {
        "acmeEmail": {
          "type": "string",
          "x-go-name": "AcmeEmail"
        },
        "acmeUrl": {
          "type": "string",
          "x-go-name": "AcmeUrl"
        },
        "domainName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DomainNames"
        },
        "pushS3": {
          "type": "boolean",
          "x-go-name": "PushS3"
        },
        "recurseServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RecursiveNameServers"
        },
        "saveZip": {
          "type": "boolean",
          "x-go-name": "SaveZip"
        },
        "timeout": {
          "$ref": "#/definitions/Duration"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "zipDir": {
          "type": "string",
          "x-go-name": "ZipDir"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webutils/cert_renew"
    },
    "CreateAppPermissionRequest": {
      "type": "object",
      "properties": {
        "descripiton": {
          "type": "string",
          "x-go-name": "PermissionDescription"
        },
        "name": {
          "type": "string",
          "x-go-name": "PermissionName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "CreateNewUserRequest": {
      "type": "object",
      "properties": {
        "newEmail": {
          "type": "string",
          "x-go-name": "NewUserEmail"
        },
        "newPassword": {
          "type": "string",
          "x-go-name": "NewUserPassword"
        },
        "newUserRole": {
          "type": "string",
          "x-go-name": "NewUserRole"
        },
        "newUsername": {
          "type": "string",
          "x-go-name": "NewUsername"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "CreateRolePermissionMappingRequest": {
      "type": "object",
      "properties": {
        "permId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "PermissionId"
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "RoleId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "CreateUserRoleRequest": {
      "type": "object",
      "properties": {
        "roleDesc": {
          "type": "string",
          "x-go-name": "RoleDescription"
        },
        "roleName": {
          "type": "string",
          "x-go-name": "RoleName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "DisableUserRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "EnableUserRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "SoftDeleteUserByIdRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UpdateUserPasswordRequest": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "targetUserId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UpdateUserRoleMappingRequest": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "RoleId"
        },
        "targetUserId": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UserLoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/authapi"
    }
  },
  "responses": {
    "AuthToken": {
      "description": "Respose will return login result and the user info.",
      "headers": {
        "expiration": {
          "type": "string",
          "format": "date-time"
        },
        "refreshToken": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "UserDao": {
      "description": "Respose will return login result and the user info.",
      "headers": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "role_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}