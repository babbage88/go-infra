{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "go-infra API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Justin Trahan",
      "email": "test@trahan.dev"
    },
    "license": {
      "name": "N/A"
    },
    "version": "v1.1.0"
  },
  "host": "localhost:8993",
  "paths": {
    "/create/permission": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "PermissionsCRUD"
        ],
        "summary": "Create New App Permission.",
        "operationId": "CreateAppPermission",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAppPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateAppPermissionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/create/role": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "RolesCRUD"
        ],
        "summary": "Create New User Role.",
        "operationId": "CreateUserRole",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUserRoleResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/create/user": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Create a new user.",
        "operationId": "CreateUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateNewUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUserResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/external-applications": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Get all external applications.",
        "operationId": "getAllExternalApplications",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllExternalApplicationsResponse"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Create a new external application.",
        "operationId": "createExternalApplication",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateExternalApplicationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreateExternalApplicationResponse"
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "409": {
            "description": "Conflict - application with this name already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/external-applications/by-name/{name}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Get an external application by name.",
        "operationId": "getExternalApplicationByName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of the external application",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetExternalApplicationByNameResponse"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Delete an external application by name.",
        "operationId": "deleteExternalApplicationByName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of the external application",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "External application deleted successfully"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/external-applications/id/{name}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Get an external application ID by name.",
        "operationId": "getExternalApplicationIdByName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of the external application",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetExternalApplicationIdByNameResponse"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/external-applications/name/{ID}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Get an external application name by ID.",
        "operationId": "getExternalApplicationNameById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the external application",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetExternalApplicationNameByIdResponse"
          },
          "400": {
            "description": "Bad request - invalid UUID format"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/external-applications/{ID}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Get an external application by ID.",
        "operationId": "getExternalApplicationById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the external application",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetExternalApplicationByIdResponse"
          },
          "400": {
            "description": "Bad request - invalid UUID format"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Update an external application.",
        "operationId": "updateExternalApplication",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the external application",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateExternalApplicationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateExternalApplicationResponse"
          },
          "400": {
            "description": "Bad request - invalid UUID format or request body"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "external-applications"
        ],
        "summary": "Delete an external application by ID.",
        "operationId": "deleteExternalApplicationById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the external application",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "External application deleted successfully"
          },
          "400": {
            "description": "Bad request - invalid UUID format"
          },
          "404": {
            "description": "External application not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/host-servers": {
      "get": {
        "tags": [
          "host-servers"
        ],
        "summary": "Get all host servers.",
        "operationId": "GetAllHostServers",
        "responses": {
          "200": {
            "$ref": "#/responses/HostServersResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/host-servers/create": {
      "post": {
        "tags": [
          "host-servers"
        ],
        "summary": "Create a new host server.",
        "operationId": "CreateHostServer",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateHostServerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HostServerResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/host-servers/{ID}": {
      "get": {
        "tags": [
          "host-servers"
        ],
        "summary": "Get a host server by ID.",
        "operationId": "GetHostServer",
        "responses": {
          "200": {
            "$ref": "#/responses/HostServerResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "host-servers"
        ],
        "summary": "Update a host server.",
        "operationId": "UpdateHostServer",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateHostServerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HostServerResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "host-servers"
        ],
        "summary": "Delete a host server.",
        "operationId": "DeleteHostServer",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host server deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Local Auth login with username and password",
        "tags": [
          "Authentication"
        ],
        "operationId": "LocalLogin",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LocalLoginResponse"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Insernal Server Error"
          }
        }
      }
    },
    "/network/ping": {
      "post": {
        "tags": [
          "network-ping"
        ],
        "summary": "Ping an arbitrary hostname or IP address.",
        "operationId": "pingHost",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PingResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/ping-host-server": {
      "post": {
        "tags": [
          "network-ping"
        ],
        "summary": "Ping a managed host server by its ID.",
        "operationId": "pingHostServer",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PingHostServerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PingResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Host server not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/ping/{target}": {
      "get": {
        "tags": [
          "network-ping"
        ],
        "summary": "Ping an arbitrary hostname or IP address using GET method.",
        "operationId": "pingHostGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Target",
            "description": "Target hostname or IP address to ping",
            "name": "target",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PingResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/probe-tcp-host-id": {
      "post": {
        "tags": [
          "network-probe"
        ],
        "summary": "Probe a TCP port on a managed host server by its ID.",
        "operationId": "probeTCPByHostId",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProbeByHostIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkProbeResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Host server not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/probe-tcp-hostname": {
      "post": {
        "tags": [
          "network-probe"
        ],
        "summary": "Probe a TCP port on a host by hostname.",
        "operationId": "probeTCPByHostname",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProbeByHostnameRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkProbeResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/probe-tcp/{target}/{port}": {
      "get": {
        "tags": [
          "network-probe"
        ],
        "summary": "Probe a TCP port on a host using GET method.",
        "operationId": "probeTCPGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Target",
            "description": "Target hostname to probe",
            "name": "target",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Port",
            "description": "Port number to probe",
            "name": "port",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkProbeResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/probe-udp-host-id": {
      "post": {
        "tags": [
          "network-probe"
        ],
        "summary": "Probe a UDP port on a managed host server by its ID.",
        "operationId": "probeUDPByHostId",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProbeByHostIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkProbeResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Host server not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/probe-udp-hostname": {
      "post": {
        "tags": [
          "network-probe"
        ],
        "summary": "Probe a UDP port on a host by hostname.",
        "operationId": "probeUDPByHostname",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProbeByHostnameRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkProbeResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/network/probe-udp/{target}/{port}": {
      "get": {
        "tags": [
          "network-probe"
        ],
        "summary": "Probe a UDP port on a host using GET method.",
        "operationId": "probeUDPGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Target",
            "description": "Target hostname to probe",
            "name": "target",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Port",
            "description": "Port number to probe",
            "name": "port",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkProbeResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns all App Permissions",
        "tags": [
          "PermissionsCRUD"
        ],
        "operationId": "GetAllAppPermissions",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllAppPermissionsResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/renew": {
      "post": {
        "description": "Request/Renew ssl certificate via cloudflare letsencrypt. Uses DNS Challenge",
        "produces": [
          "application/json",
          "application/zip"
        ],
        "tags": [
          "Certificates"
        ],
        "operationId": "Renew",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CertDnsRenewReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CertificateDataRenewResponse"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Insernal Server Error"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "RolesCRUD"
        ],
        "summary": "Returns all active User Roles.",
        "operationId": "GetAllUserRoles",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllRolesResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/roles/permission": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "PermissionsCRUD"
        ],
        "summary": "Map App Permission to User Role.",
        "operationId": "CreateRolePermissionMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRolePermissionMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateRolePermissionMapptingResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/secrets/create": {
      "post": {
        "tags": [
          "secrets"
        ],
        "summary": "Create a new external application secret.",
        "operationId": "createUserSecret",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSecretRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateSecretResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/secrets/delete/{ID}": {
      "delete": {
        "tags": [
          "secrets"
        ],
        "summary": "Delete a user secret by ID.",
        "operationId": "deleteUserSecretByID",
        "parameters": [
          {
            "type": "string",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Secret deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/secrets/{ID}": {
      "get": {
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a user secret by ID.",
        "operationId": "getUserSecretByID",
        "parameters": [
          {
            "type": "string",
            "description": "ID of secret",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RetrievedSecretResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ssh-key-host-mappings/create": {
      "post": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Create a new SSH key host mapping.",
        "operationId": "createSshKeyHostMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSshKeyHostMappingRequestWithoutUserID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateSshKeyHostMappingResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-key-host-mappings/host/{hostId}": {
      "get": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Get all SSH key host mappings for a host server.",
        "operationId": "getSshKeyHostMappingsByHostId",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "HostID",
            "description": "ID of the host server to get mappings for",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSshKeyHostMappingsByHostIdResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-key-host-mappings/key/{keyId}": {
      "get": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Get all SSH key host mappings for an SSH key.",
        "operationId": "getSshKeyHostMappingsByKeyId",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "KeyID",
            "description": "ID of the SSH key to get mappings for",
            "name": "keyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSshKeyHostMappingsByKeyIdResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-key-host-mappings/user/{userId}": {
      "get": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Get all SSH key host mappings for a user.",
        "operationId": "getSshKeyHostMappingsByUserId",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UserID",
            "description": "ID of the user to get mappings for",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSshKeyHostMappingsByUserIdResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-key-host-mappings/{id}": {
      "get": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Get an SSH key host mapping by ID.",
        "operationId": "getSshKeyHostMappingById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the SSH key host mapping to retrieve",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSshKeyHostMappingByIdResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Update an SSH key host mapping.",
        "operationId": "updateSshKeyHostMapping",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the SSH key host mapping to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateSshKeyHostMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateSshKeyHostMappingResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ssh-key-host-mappings"
        ],
        "summary": "Delete an SSH key host mapping.",
        "operationId": "deleteSshKeyHostMapping",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the SSH key host mapping to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteSshKeyHostMappingResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-keys/create": {
      "post": {
        "tags": [
          "ssh-keys"
        ],
        "summary": "Create a new SSH key.",
        "operationId": "createSshKey",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSshKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateSshKeyResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-keys/user/{userId}": {
      "get": {
        "tags": [
          "ssh-keys"
        ],
        "summary": "Get all SSH keys owned by a user.",
        "operationId": "getSshKeysByUserId",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UserID",
            "description": "ID of the user to get SSH keys for",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSshKeysByUserIdResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh-keys/{id}": {
      "delete": {
        "tags": [
          "ssh-keys"
        ],
        "summary": "Delete an SSH key and its associated secret.",
        "operationId": "deleteSshKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the SSH key to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteSshKeyResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh/connect": {
      "post": {
        "tags": [
          "ssh"
        ],
        "summary": "Create a new SSH connection to a host server.",
        "operationId": "createSshConnection",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SshConnectionRequestDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SshConnectionResponse",
            "schema": {
              "$ref": "#/definitions/SshConnectionResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Host server not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh/connect/{connectionId}": {
      "delete": {
        "tags": [
          "ssh"
        ],
        "summary": "Close an SSH connection.",
        "operationId": "closeSshConnection",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "CONNID",
            "name": "connectionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SshConnectionCloseResponse",
            "schema": {
              "$ref": "#/definitions/SshConnectionCloseResponse"
            }
          },
          "400": {
            "description": "Invalid connection ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Session not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ssh/websocket/{connectionId}": {
      "get": {
        "tags": [
          "ssh"
        ],
        "summary": "WebSocket endpoint for SSH terminal communication.",
        "operationId": "sshWebSocket",
        "responses": {
          "101": {
            "description": "Switching Protocols"
          },
          "400": {
            "description": "Invalid connection ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Session not found"
          }
        }
      }
    },
    "/token/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh accessTokens and return to client.",
        "operationId": "RefreshAccessToken",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TokenRefreshReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RefreshAccessTokenResponse"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Insernal Server Error"
          }
        }
      }
    },
    "/token/verify": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify a JWT access token's validity.",
        "operationId": "VerifyToken",
        "responses": {
          "200": {
            "description": "Valid Token"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/update/userpass": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Update user password.",
        "operationId": "UpdateUserPw",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPasswordUpdateResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/delete": {
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Soft Delete User by id.",
        "operationId": "SoftDeleteUserById",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SoftDeleteUserByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftDeleteUserByIdResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/disable": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Disable specified target User Id.",
        "operationId": "DisableUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DisableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/enable": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Enable specified target User Id.",
        "operationId": "EnableUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/role": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update User Role Mapping",
        "tags": [
          "RolesCRUD"
        ],
        "operationId": "UpdateUserRole",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateUserRoleMappingResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/role/remove": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Disable User Role Mapping",
        "tags": [
          "UserCRUD"
        ],
        "operationId": "DisableUserRoleMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/secrets/by-name/{APPNAME}/{USERID}": {
      "get": {
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a user secret by USERID and application name.",
        "operationId": "GetUserSecretEntriesByAppName",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "USERID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "APPNAME",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserSecretEntriesResponse"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/secrets/{USERID}": {
      "get": {
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a user secret by USERID.",
        "operationId": "GetUserSecretEntries",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "USERID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserSecretEntriesResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/user/{APPID}/secrets/{USERID}": {
      "get": {
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a user secret by USERID.",
        "operationId": "GetUserSecretEntriesByAppId",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "USERID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "APPID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserSecretEntriesResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Returns all active users.",
        "operationId": "GetAllUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllUsersResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{ID}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Returns User Info for the user id specified in URL users.",
        "operationId": "getUserById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserByIdResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessTokens": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "userName": {
          "type": "string",
          "x-go-name": "Username"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-name": "AccessTokenRefreshResponse",
      "x-go-package": "github.com/babbage88/go-infra/api/authapi"
    },
    "AppPermissionDao": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "permissionDescription": {
          "type": "string",
          "x-go-name": "PermissionDescription"
        },
        "permissionName": {
          "type": "string",
          "x-go-name": "PermissionName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "AuthToken": {
      "type": "object",
      "title": "Respose will return login result and the user info.",
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "Token"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "userName": {
          "type": "string",
          "x-go-name": "Username"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/authapi"
    },
    "AuthTokenDao": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "last_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "CertDnsRenewReq": {
      "type": "object",
      "properties": {
        "acmeEmail": {
          "type": "string",
          "x-go-name": "AcmeEmail"
        },
        "acmeUrl": {
          "type": "string",
          "x-go-name": "AcmeUrl"
        },
        "domainName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DomainNames"
        },
        "pushS3": {
          "type": "boolean",
          "x-go-name": "PushS3"
        },
        "recurseServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RecursiveNameServers"
        },
        "timeout": {
          "$ref": "#/definitions/Duration"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "zipDir": {
          "type": "string",
          "x-go-name": "ZipDir"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webutils/cert_renew"
    },
    "CertificateData": {
      "type": "object",
      "properties": {
        "cert_pem": {
          "type": "string",
          "x-go-name": "CertPEM"
        },
        "chain_pem": {
          "type": "string",
          "x-go-name": "ChainPEM"
        },
        "domainName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DomainNames"
        },
        "fullchain_pem": {
          "type": "string",
          "x-go-name": "Fullchain"
        },
        "priv_key": {
          "type": "string",
          "x-go-name": "PrivKey"
        },
        "s3DownloadUrl": {
          "type": "string",
          "x-go-name": "S3DownloadUrl"
        },
        "zipDir": {
          "type": "string",
          "x-go-name": "ZipDir"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webutils/cert_renew"
    },
    "CreateAppPermissionRequest": {
      "type": "object",
      "properties": {
        "descripiton": {
          "type": "string",
          "x-go-name": "PermissionDescription"
        },
        "name": {
          "type": "string",
          "x-go-name": "PermissionName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "CreateAppPermissionResult": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "newPermissionInfo": {
          "$ref": "#/definitions/AppPermissionDao"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "CreateExternalApplicationRequest": {
      "type": "object",
      "properties": {
        "appDescription": {
          "type": "string",
          "x-go-name": "AppDescription"
        },
        "endpointUrl": {
          "type": "string",
          "x-go-name": "EndpointUrl"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/external_applications"
    },
    "CreateHostServerRequest": {
      "type": "object",
      "required": [
        "hostname",
        "ip_address"
      ],
      "properties": {
        "hostname": {
          "description": "Hostname of the server",
          "type": "string",
          "x-go-name": "Hostname",
          "example": "server-01.example.com"
        },
        "ip_address": {
          "description": "IP address of the server",
          "type": "string",
          "x-go-name": "IPAddress",
          "example": "192.168.1.100"
        },
        "is_container_host": {
          "description": "Whether this server can host containers",
          "type": "boolean",
          "x-go-name": "IsContainerHost",
          "example": true
        },
        "is_db_host": {
          "description": "Whether this server can host databases",
          "type": "boolean",
          "x-go-name": "IsDbHost",
          "example": false
        },
        "is_virtual_machine": {
          "description": "Whether this server is a virtual machine",
          "type": "boolean",
          "x-go-name": "IsVirtualMachine",
          "example": false
        },
        "is_vm_host": {
          "description": "Whether this server can host VMs",
          "type": "boolean",
          "x-go-name": "IsVmHost",
          "example": false
        },
        "ssh_key_id": {
          "description": "SSH key ID for authentication",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SSHKeyID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "sudo_password_token_id": {
          "description": "Optional sudo password token ID",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SudoPasswordTokenID",
          "example": "123e4567-e89b-12d3-a456-426614174001"
        },
        "username": {
          "description": "Username for SSH connection",
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/host_servers"
    },
    "CreateNewUserRequest": {
      "type": "object",
      "properties": {
        "newEmail": {
          "type": "string",
          "x-go-name": "NewUserEmail"
        },
        "newPassword": {
          "type": "string",
          "x-go-name": "NewUserPassword"
        },
        "newUsername": {
          "type": "string",
          "x-go-name": "NewUsername"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "CreateRolePermissionMappingRequest": {
      "type": "object",
      "properties": {
        "permId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "PermissionId"
        },
        "roleId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "RoleId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "CreateRolePermissionMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "newMappingInfo": {
          "$ref": "#/definitions/RolePermissionMappingDao"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "CreateSecretRequest": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ApplicationID"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "secret": {
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    },
    "CreateSshKeyHostMappingRequest": {
      "type": "object",
      "required": [
        "sshKeyId",
        "hostServerId",
        "userId",
        "hostserverUsername"
      ],
      "properties": {
        "hostServerId": {
          "description": "ID of the host server to map to",
          "type": "string",
          "format": "uuid",
          "x-go-name": "HostServerID"
        },
        "hostserverUsername": {
          "description": "Username to use on the host server",
          "type": "string",
          "x-go-name": "HostserverUsername"
        },
        "sshKeyId": {
          "description": "ID of the SSH key to map",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SshKeyID"
        },
        "sudoPasswordTokenId": {
          "description": "ID of the sudo password token",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SudoPasswordTokenId"
        },
        "userId": {
          "description": "ID of the user who owns the mapping",
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "CreateSshKeyHostMappingRequestWithoutUserID": {
      "type": "object",
      "required": [
        "sshKeyId",
        "hostServerId",
        "hostserverUsername"
      ],
      "properties": {
        "hostServerId": {
          "description": "ID of the host server to map to",
          "type": "string",
          "format": "uuid",
          "x-go-name": "HostServerID"
        },
        "hostserverUsername": {
          "description": "Username to use on the host server",
          "type": "string",
          "x-go-name": "HostserverUsername"
        },
        "sshKeyId": {
          "description": "ID of the SSH key to map",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SshKeyID"
        },
        "sudoPasswordTokenId": {
          "description": "ID of the sudo password token",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SudoPasswordTokenId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "CreateSshKeyHostMappingResponse": {
      "type": "object",
      "required": [
        "id",
        "sshKeyId",
        "hostServerId",
        "userId",
        "hostserverUsername",
        "createdAt",
        "lastModified"
      ],
      "properties": {
        "createdAt": {
          "description": "Creation timestamp",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "error": {
          "description": "Error message if the operation failed",
          "type": "string",
          "x-go-name": "Error"
        },
        "hostServerId": {
          "description": "ID of the host server",
          "type": "string",
          "format": "uuid",
          "x-go-name": "HostServerID"
        },
        "hostserverUsername": {
          "description": "Username on the host server",
          "type": "string",
          "x-go-name": "HostserverUsername"
        },
        "id": {
          "description": "ID of the created mapping",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last modification timestamp",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "sshKeyId": {
          "description": "ID of the SSH key",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SshKeyID"
        },
        "userId": {
          "description": "ID of the user",
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "CreateSshKeyRequest": {
      "type": "object",
      "required": [
        "name",
        "publicKey",
        "privateKey",
        "keyType"
      ],
      "properties": {
        "description": {
          "description": "Description of the SSH key",
          "type": "string",
          "x-go-name": "Description"
        },
        "hostServerId": {
          "description": "Optional host server ID to associate the key with",
          "type": "string",
          "format": "uuid",
          "x-go-name": "HostServerId"
        },
        "keyType": {
          "description": "Type of the SSH key (e.g., rsa, ed25519)",
          "type": "string",
          "x-go-name": "KeyType"
        },
        "name": {
          "description": "Name of the SSH key",
          "type": "string",
          "x-go-name": "Name"
        },
        "passphrase": {
          "description": "Optional ssh key passphrase",
          "type": "string",
          "x-go-name": "Passphrase"
        },
        "privateKey": {
          "description": "Private key in PEM format",
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "publicKey": {
          "description": "Public key in OpenSSH format",
          "type": "string",
          "x-go-name": "PublicKey"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "CreateSshKeyResponse": {
      "type": "object",
      "required": [
        "sshKeyId",
        "privKeySecretId",
        "passphraseSecretId",
        "userId"
      ],
      "properties": {
        "error": {
          "description": "Error message if the operation failed",
          "type": "string",
          "x-go-name": "Error"
        },
        "passphraseSecretId": {
          "description": "ID of the stored private key secret",
          "type": "string",
          "format": "uuid",
          "x-go-name": "PassphraseSecretId"
        },
        "privKeySecretId": {
          "description": "ID of the stored private key secret",
          "type": "string",
          "format": "uuid",
          "x-go-name": "PrivKeySecretId"
        },
        "sshKeyId": {
          "description": "ID of the created SSH key",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SshKeyId"
        },
        "userId": {
          "description": "ID of the user who owns the key",
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "CreateUserRoleRequest": {
      "type": "object",
      "properties": {
        "roleDesc": {
          "type": "string",
          "x-go-name": "RoleDescription"
        },
        "roleName": {
          "type": "string",
          "x-go-name": "RoleName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "DeleteSshKeyHostMappingResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "Success message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "DisableUserRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "EnableDisableUserResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "modifiedUserInfo": {
          "$ref": "#/definitions/UserDao"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "EnableUserRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "ExternalAppSecretMetadata": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    },
    "ExternalApplicationDao": {
      "type": "object",
      "properties": {
        "appDescription": {
          "type": "string",
          "x-go-name": "AppDescription"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "endpointUrl": {
          "type": "string",
          "x-go-name": "EndpointUrl"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/external_applications"
    },
    "ExternalApplicationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "UrlEndpoint"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    },
    "GetAllAppPermissionsResponse": {
      "type": "object",
      "properties": {
        "appPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppPermissionDao"
          },
          "x-go-name": "AppPermissions"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "GetAllRolesResponse": {
      "type": "object",
      "properties": {
        "userRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleDao"
          },
          "x-go-name": "UserRoles"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "GetUserByIdResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserDao"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "HostServer": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "HostedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Hostname": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "int32"
        },
        "IDDbHost": {
          "type": "boolean"
        },
        "IpAddress": {
          "type": "string"
        },
        "IsContainerHost": {
          "type": "boolean"
        },
        "IsVirtualMachine": {
          "type": "boolean"
        },
        "IsVmHost": {
          "type": "boolean"
        },
        "LastModified": {
          "type": "string",
          "format": "date-time"
        },
        "PublicSshKeyname": {
          "type": "string"
        },
        "SslKeyPath": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "HostServerResponse": {
      "type": "object",
      "title": "HostServerResponse represents a host server response.",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "ip_address": {
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "is_container_host": {
          "type": "boolean",
          "x-go-name": "IsContainerHost"
        },
        "is_db_host": {
          "type": "boolean",
          "x-go-name": "IsDbHost"
        },
        "is_virtual_machine": {
          "type": "boolean",
          "x-go-name": "IsVirtualMachine"
        },
        "is_vm_host": {
          "type": "boolean",
          "x-go-name": "IsVmHost"
        },
        "last_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "ssh_key_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "SSHKeyID"
        },
        "sudo_password_token_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "SudoPasswordTokenID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/host_servers"
    },
    "HostServersResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HostServerResponse"
      },
      "x-go-package": "github.com/babbage88/go-infra/services/host_servers"
    },
    "HostedDbPlatform": {
      "type": "object",
      "properties": {
        "DefaultListenPort": {
          "type": "integer",
          "format": "int32"
        },
        "ID": {
          "type": "integer",
          "format": "int32"
        },
        "PlatformName": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "LoginResponseInfo": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "Token"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "userName": {
          "type": "string",
          "x-go-name": "Username"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-name": "LocalLoginResponse",
      "x-go-package": "github.com/babbage88/go-infra/api/authapi"
    },
    "NetworkProbeResponse": {
      "type": "object",
      "required": [
        "targetHostName",
        "targetPort",
        "success",
        "latency"
      ],
      "properties": {
        "error": {
          "description": "Error message if the operation failed",
          "type": "string",
          "x-go-name": "Error"
        },
        "latency": {
          "description": "Latency of the probe operation",
          "type": "string",
          "x-go-name": "Latency"
        },
        "success": {
          "description": "Whether the probe was successful",
          "type": "boolean",
          "x-go-name": "Success"
        },
        "targetHostId": {
          "description": "ID of the target host server (if applicable)",
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetHostId"
        },
        "targetHostName": {
          "description": "Name of the target host",
          "type": "string",
          "x-go-name": "TargetHostName"
        },
        "targetPort": {
          "description": "Port number that was probed",
          "type": "integer",
          "format": "uint16",
          "x-go-name": "TargetPort"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/node_networking"
    },
    "PingHostServerRequest": {
      "type": "object",
      "required": [
        "hostServerId"
      ],
      "properties": {
        "hostServerId": {
          "description": "ID of the host server to ping",
          "type": "string",
          "format": "uuid",
          "x-go-name": "HostServerID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/node_networking"
    },
    "PingRequest": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "target": {
          "description": "Target hostname or IP address to ping",
          "type": "string",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/node_networking"
    },
    "PingResponse": {
      "type": "object",
      "required": [
        "targetHostName",
        "success",
        "latency"
      ],
      "properties": {
        "error": {
          "description": "Error message if the operation failed",
          "type": "string",
          "x-go-name": "Error"
        },
        "latency": {
          "description": "Latency of the ping operation",
          "type": "string",
          "x-go-name": "Latency"
        },
        "success": {
          "description": "Whether the ping was successful",
          "type": "boolean",
          "x-go-name": "Success"
        },
        "targetHostId": {
          "description": "ID of the target host server (if applicable)",
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetHostId"
        },
        "targetHostName": {
          "description": "Name of the target host",
          "type": "string",
          "x-go-name": "TargetHostName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/node_networking"
    },
    "ProbeByHostIdRequest": {
      "type": "object",
      "required": [
        "targetHostId",
        "port"
      ],
      "properties": {
        "port": {
          "description": "Port number to probe",
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Port"
        },
        "targetHostId": {
          "description": "ID of the target host server",
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetHostId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/node_networking"
    },
    "ProbeByHostnameRequest": {
      "type": "object",
      "required": [
        "targetHostName",
        "port"
      ],
      "properties": {
        "port": {
          "description": "Port number to probe",
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Port"
        },
        "targetHostName": {
          "description": "Target hostname to probe",
          "type": "string",
          "x-go-name": "TargetHostName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/node_networking"
    },
    "RolePermissionMappingDao": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "permissionId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "PermissionId"
        },
        "roleId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "RoleId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "SoftDeleteUserByIdRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "SoftDeleteUserByIdResponse": {
      "type": "object",
      "properties": {
        "deletedUserInfo": {
          "$ref": "#/definitions/UserDao"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "SshConnectionCloseResponse": {
      "description": "SSH Connection Close Response",
      "type": "object",
      "properties": {
        "message": {
          "description": "Success message",
          "type": "string",
          "x-go-name": "Message",
          "example": "Connection closed successfully"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_connections"
    },
    "SshConnectionRequestDetails": {
      "description": "SSH Connection Request",
      "type": "object",
      "required": [
        "hostServerId",
        "username"
      ],
      "properties": {
        "hostServerId": {
          "description": "Host server ID to connect to",
          "type": "string",
          "format": "uuid",
          "x-go-name": "HostServerID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "username": {
          "description": "Username to connect as on the remote server",
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-name": "SshConnectionRequest",
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_connections"
    },
    "SshConnectionResponse": {
      "description": "SSH Connection Response",
      "type": "object",
      "properties": {
        "connectionId": {
          "description": "Unique connection identifier",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ConnectionID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "error": {
          "description": "Error message if connection failed",
          "type": "string",
          "x-go-name": "Error",
          "example": "SSH key not found"
        },
        "success": {
          "description": "Whether the connection was successful",
          "type": "boolean",
          "x-go-name": "Success",
          "example": true
        },
        "websocketUrl": {
          "description": "WebSocket URL for terminal communication",
          "type": "string",
          "x-go-name": "WebsocketURL",
          "example": "ws://localhost:8080/ssh/websocket/123e4567-e89b-12d3-a456-426614174000"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_connections"
    },
    "SshKeyListItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "keyType": {
          "type": "string",
          "x-go-name": "KeyType"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ownerUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "OwnerUserID"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "TokenRefreshReq": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/authapi"
    },
    "UUIDs": {
      "type": "array",
      "title": "UUIDs is a slice of UUID types.",
      "items": {
        "type": "string",
        "format": "uuid"
      },
      "x-go-package": "github.com/google/uuid"
    },
    "UpdateExternalApplicationRequest": {
      "type": "object",
      "properties": {
        "appDescription": {
          "type": "string",
          "x-go-name": "AppDescription"
        },
        "endpointUrl": {
          "type": "string",
          "x-go-name": "EndpointUrl"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/external_applications"
    },
    "UpdateHostServerRequest": {
      "type": "object",
      "properties": {
        "hostname": {
          "description": "Hostname of the server",
          "type": "string",
          "x-go-name": "Hostname",
          "example": "server-01.example.com"
        },
        "ip_address": {
          "description": "IP address of the server",
          "type": "string",
          "x-go-name": "IPAddress",
          "example": "192.168.1.100"
        },
        "is_container_host": {
          "description": "Whether this server can host containers",
          "type": "boolean",
          "x-go-name": "IsContainerHost",
          "example": true
        },
        "is_db_host": {
          "description": "Whether this server can host databases",
          "type": "boolean",
          "x-go-name": "IsDbHost",
          "example": false
        },
        "is_virtual_machine": {
          "description": "Whether this server is a virtual machine",
          "type": "boolean",
          "x-go-name": "IsVirtualMachine",
          "example": false
        },
        "is_vm_host": {
          "description": "Whether this server can host VMs",
          "type": "boolean",
          "x-go-name": "IsVmHost",
          "example": false
        },
        "ssh_key_id": {
          "description": "SSH key ID for authentication",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SSHKeyID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "sudo_password_token_id": {
          "description": "Optional sudo password token ID",
          "type": "string",
          "format": "uuid",
          "x-go-name": "SudoPasswordTokenID",
          "example": "123e4567-e89b-12d3-a456-426614174001"
        },
        "username": {
          "description": "Username for SSH connection",
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/host_servers"
    },
    "UpdateSshKeyHostMappingRequest": {
      "type": "object",
      "required": [
        "id",
        "hostserverUsername"
      ],
      "properties": {
        "hostserverUsername": {
          "description": "Username to use on the host server",
          "type": "string",
          "x-go-name": "HostserverUsername"
        },
        "id": {
          "description": "ID of the SSH key host mapping to update",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/ssh_key_provider"
    },
    "UpdateUserPasswordRequest": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "UpdateUserRoleMappingRequest": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "RoleId"
        },
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "UpdateUserRoleMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "success": {
          "type": "boolean",
          "x-go-name": "Success"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "UserDao": {
      "type": "object",
      "title": "Respose will return login result and the user info.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "isDeleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "role_ids": {
          "$ref": "#/definitions/UUIDs"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "UserHostedDb": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "CurrentHostServerID": {
          "type": "integer",
          "format": "int32"
        },
        "CurrentKubeClusterID": {
          "type": "integer",
          "format": "int32"
        },
        "DbPlatformID": {
          "type": "integer",
          "format": "int32"
        },
        "Fqdn": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "int32"
        },
        "LastModified": {
          "type": "string",
          "format": "date-time"
        },
        "ListenPort": {
          "type": "integer",
          "format": "int32"
        },
        "PriceTierCodeID": {
          "type": "integer",
          "format": "int32"
        },
        "PrivateIpAddress": {
          "type": "string"
        },
        "PubIpAddress": {
          "type": "string"
        },
        "UserApplicationIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "UserID": {
          "type": "integer",
          "format": "int32"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "UserLoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/authapi"
    },
    "UserPasswordUpdateResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "success": {
          "type": "boolean",
          "x-go-name": "Success"
        },
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/api/user_api_handlers"
    },
    "UserRoleDao": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "isDeleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "roleDesc": {
          "type": "string",
          "x-go-name": "RoleDescription"
        },
        "roleName": {
          "type": "string",
          "x-go-name": "RoleName"
        }
      },
      "x-go-name": "CreateUserRoleResponse",
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "UserSecretEntry": {
      "type": "object",
      "properties": {
        "appInfo": {
          "$ref": "#/definitions/ExternalApplicationInfo"
        },
        "secretMetadata": {
          "$ref": "#/definitions/ExternalAppSecretMetadata"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    }
  },
  "responses": {
    "CertificateDataRenewResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CertificateData"
      },
      "headers": {
        "Body": {}
      }
    },
    "CreateAppPermissionResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CreateAppPermissionResult"
      }
    },
    "CreateExternalApplicationResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/ExternalApplicationDao"
      }
    },
    "CreateRolePermissionMapptingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CreateRolePermissionMappingResponse"
      }
    },
    "CreateSecretResponse": {
      "description": "(empty)",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          }
        }
      }
    },
    "CreateSshKeyHostMappingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CreateSshKeyHostMappingResponse"
      }
    },
    "CreateSshKeyResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CreateSshKeyResponse"
      }
    },
    "CreateUserResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UserDao"
      }
    },
    "CreateUserRoleResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UserRoleDao"
      }
    },
    "DeleteSshKeyHostMappingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/DeleteSshKeyHostMappingResponse"
      }
    },
    "DeleteSshKeyResponse": {
      "description": "(empty)",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Success message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "EnableDisableUserResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/EnableDisableUserResponse"
      }
    },
    "GetAllAppPermissionsResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/GetAllAppPermissionsResponse"
      },
      "headers": {
        "body": {}
      }
    },
    "GetAllExternalApplicationsResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ExternalApplicationDao"
        }
      }
    },
    "GetAllRolesResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/GetAllRolesResponse"
      },
      "headers": {
        "body": {}
      }
    },
    "GetAllUsersResponse": {
      "description": "(empty)",
      "headers": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDao"
          }
        }
      }
    },
    "GetExternalApplicationByIdResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/ExternalApplicationDao"
      }
    },
    "GetExternalApplicationByNameResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/ExternalApplicationDao"
      }
    },
    "GetExternalApplicationIdByNameResponse": {
      "description": "(empty)",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          }
        }
      }
    },
    "GetExternalApplicationNameByIdResponse": {
      "description": "(empty)",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      }
    },
    "GetSshKeyHostMappingByIdResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CreateSshKeyHostMappingResponse"
      }
    },
    "GetSshKeyHostMappingsByHostIdResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CreateSshKeyHostMappingResponse"
        }
      }
    },
    "GetSshKeyHostMappingsByKeyIdResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CreateSshKeyHostMappingResponse"
        }
      }
    },
    "GetSshKeyHostMappingsByUserIdResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CreateSshKeyHostMappingResponse"
        }
      }
    },
    "GetSshKeysByUserIdResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SshKeyListItem"
        }
      }
    },
    "GetUserByIdResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/GetUserByIdResponse"
      }
    },
    "GetUserSecretEntriesResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/UserSecretEntry"
        }
      }
    },
    "HostServerResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/HostServerResponse"
      }
    },
    "HostServersResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/HostServerResponse"
        }
      }
    },
    "LocalLoginResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/LoginResponseInfo"
      },
      "headers": {
        "Body": {}
      }
    },
    "NetworkProbeResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/NetworkProbeResponse"
      }
    },
    "PingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/PingResponse"
      }
    },
    "RefreshAccessTokenResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/AccessTokens"
      }
    },
    "RetrievedSecretResponse": {
      "description": "(empty)",
      "schema": {
        "type": "object",
        "properties": {
          "expiration": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Expiration"
          },
          "external_application_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ExternalApplication"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "secret": {
            "type": "string",
            "x-go-name": "Secret"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UserID"
          }
        }
      }
    },
    "SoftDeleteUserByIdResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/SoftDeleteUserByIdResponse"
      }
    },
    "UpdateExternalApplicationResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/ExternalApplicationDao"
      }
    },
    "UpdateSshKeyHostMappingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/CreateSshKeyHostMappingResponse"
      }
    },
    "UpdateUserRoleMappingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UpdateUserRoleMappingResponse"
      }
    },
    "UserPasswordUpdateResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UserPasswordUpdateResponse"
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}