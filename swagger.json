{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "go-infra API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Justin Trahan",
      "email": "test@trahan.dev"
    },
    "license": {
      "name": "N/A"
    },
    "version": "v1.1.0"
  },
  "host": "localhost:8993",
  "paths": {
    "/create/permission": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "PermissionsCRUD"
        ],
        "summary": "Create New App Permission.",
        "operationId": "CreateAppPermission",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAppPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateAppPermissionResponse"
          }
        }
      }
    },
    "/create/role": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "RolesCRUD"
        ],
        "summary": "Create New User Role.",
        "operationId": "CreateUserRole",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUserRoleResponse"
          }
        }
      }
    },
    "/create/user": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Create a new user.",
        "operationId": "CreateUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateNewUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUserResponse"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login a user and return token.",
        "operationId": "LocalLogin",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuthToken"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns all App Permissions",
        "tags": [
          "PermissionsCRUD"
        ],
        "operationId": "GetAllAppPermissions",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllAppPermissionsResponse"
          }
        }
      }
    },
    "/renew": {
      "post": {
        "description": "Request/Renew ssl certificate via cloudflare letsencrypt. Uses DNS Challenge",
        "produces": [
          "application/json",
          "application/zip"
        ],
        "tags": [
          "Certificates"
        ],
        "operationId": "Renew",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CertDnsRenewReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CertificateData"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "RolesCRUD"
        ],
        "summary": "Returns all active User Roles.",
        "operationId": "GetAllUserRoles",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllRolesResponse"
          }
        }
      }
    },
    "/roles/permission": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "PermissionsCRUD"
        ],
        "summary": "Map App Permission to User Role.",
        "operationId": "CreateRolePermissionMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRolePermissionMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateRolePermissionMapptingResponse"
          }
        }
      }
    },
    "/secrets/create/{ID}": {
      "post": {
        "tags": [
          "secrets"
        ],
        "summary": "Create a new external application secret.",
        "operationId": "createUserSecret",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSecretRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret stored successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/secrets/delete/{ID}": {
      "delete": {
        "tags": [
          "secrets"
        ],
        "summary": "Delete a user secret by ID.",
        "operationId": "deleteUserSecretByID",
        "parameters": [
          {
            "type": "string",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Secret deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/secrets/{ID}": {
      "get": {
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a user secret by ID.",
        "operationId": "getUserSecretByID",
        "parameters": [
          {
            "type": "string",
            "description": "ID of secret",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RetrievedSecretResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/token/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh accessTokens andreturn to client.",
        "operationId": "RefreshAccessToken",
        "responses": {
          "200": {
            "$ref": "#/responses/AuthToken"
          }
        }
      }
    },
    "/update/userpass": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Update user password.",
        "operationId": "UpdateUserPw",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPasswordUpdateResponse"
          }
        }
      }
    },
    "/user/delete": {
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Soft Delete User by id.",
        "operationId": "SoftDeleteUserById",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SoftDeleteUserByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftDeleteUserByIdResponse"
          }
        }
      }
    },
    "/user/disable": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Disable specified target User Id.",
        "operationId": "DisableUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DisableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          }
        }
      }
    },
    "/user/enable": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "UserCRUD"
        ],
        "summary": "Enable specified target User Id.",
        "operationId": "EnableUser",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          }
        }
      }
    },
    "/user/role": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update User Role Mapping",
        "tags": [
          "RolesCRUD"
        ],
        "operationId": "UpdateUserRole",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateUserRoleMappingResponse"
          }
        }
      }
    },
    "/user/role/remove": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Disable User Role Mapping",
        "tags": [
          "UserCRUD"
        ],
        "operationId": "DisableUserRoleMapping",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableDisableUserResponse"
          }
        }
      }
    },
    "/user/secrets/{USERID}": {
      "get": {
        "tags": [
          "secrets"
        ],
        "summary": "Retrieve a user secret by USERID.",
        "operationId": "GetUserSecretEntries",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "USERID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserSecretEntriesResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Returns all active users.",
        "operationId": "GetAllUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/GetAllUsersResponse"
          }
        }
      }
    },
    "/users/{ID}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Returns User Info for the user id specified in URL users.",
        "operationId": "getUserById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserByIdResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "AppPermissionDao": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "newPermissionInfo": {
          "$ref": "#/definitions/AppPermissionDao"
        }
      },
      "x-go-name": "CreateAppPermissionResponse",
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "AuthTokenDao": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "last_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "CertDnsRenewReq": {
      "type": "object",
      "properties": {
        "acmeEmail": {
          "type": "string",
          "x-go-name": "AcmeEmail"
        },
        "acmeUrl": {
          "type": "string",
          "x-go-name": "AcmeUrl"
        },
        "domainName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DomainNames"
        },
        "pushS3": {
          "type": "boolean",
          "x-go-name": "PushS3"
        },
        "recurseServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RecursiveNameServers"
        },
        "timeout": {
          "$ref": "#/definitions/Duration"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "zipDir": {
          "type": "string",
          "x-go-name": "ZipDir"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webutils/cert_renew"
    },
    "CreateAppPermissionRequest": {
      "type": "object",
      "properties": {
        "descripiton": {
          "type": "string",
          "x-go-name": "PermissionDescription"
        },
        "name": {
          "type": "string",
          "x-go-name": "PermissionName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "CreateNewUserRequest": {
      "type": "object",
      "properties": {
        "newEmail": {
          "type": "string",
          "x-go-name": "NewUserEmail"
        },
        "newPassword": {
          "type": "string",
          "x-go-name": "NewUserPassword"
        },
        "newUsername": {
          "type": "string",
          "x-go-name": "NewUsername"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "CreateRolePermissionMappingRequest": {
      "type": "object",
      "properties": {
        "permId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "PermissionId"
        },
        "roleId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "RoleId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "CreateSecretRequest": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ApplicationID"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "secret": {
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    },
    "CreateUserRoleRequest": {
      "type": "object",
      "properties": {
        "roleDesc": {
          "type": "string",
          "x-go-name": "RoleDescription"
        },
        "roleName": {
          "type": "string",
          "x-go-name": "RoleName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "DisableUserRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "EnableDisableUserResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "modifiedUserInfo": {
          "$ref": "#/definitions/UserDao"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "EnableUserRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "ExternalAppSecretMetadata": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    },
    "ExternalApplicationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "UrlEndpoint"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    },
    "GetAllAppPermissionsResponse": {
      "type": "object",
      "properties": {
        "appPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppPermissionDao"
          },
          "x-go-name": "AppPermissions"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "GetAllRolesResponse": {
      "type": "object",
      "properties": {
        "userRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleDao"
          },
          "x-go-name": "UserRoles"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "GetUserByIdResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserDao"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "HostServer": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "HostedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Hostname": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "int32"
        },
        "IDDbHost": {
          "type": "boolean"
        },
        "IpAddress": {
          "type": "string"
        },
        "IsContainerHost": {
          "type": "boolean"
        },
        "IsVirtualMachine": {
          "type": "boolean"
        },
        "IsVmHost": {
          "type": "boolean"
        },
        "LastModified": {
          "type": "string",
          "format": "date-time"
        },
        "PublicSshKeyname": {
          "type": "string"
        },
        "SslKeyPath": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "HostedDbPlatform": {
      "type": "object",
      "properties": {
        "DefaultListenPort": {
          "type": "integer",
          "format": "int32"
        },
        "ID": {
          "type": "integer",
          "format": "int32"
        },
        "PlatformName": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "RolePermissionMappingDao": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "permissionId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "PermissionId"
        },
        "roleId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "RoleId"
        }
      },
      "x-go-name": "CreateRolePermissionMappingResponse",
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "SoftDeleteUserByIdRequest": {
      "type": "object",
      "properties": {
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "SoftDeleteUserByIdResponse": {
      "type": "object",
      "properties": {
        "deletedUserInfo": {
          "$ref": "#/definitions/UserDao"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UUIDs": {
      "type": "array",
      "title": "UUIDs is a slice of UUID types.",
      "items": {
        "type": "string",
        "format": "uuid"
      },
      "x-go-package": "github.com/google/uuid"
    },
    "UpdateUserPasswordRequest": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UpdateUserRoleMappingRequest": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "RoleId"
        },
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UpdateUserRoleMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "success": {
          "type": "boolean",
          "x-go-name": "Success"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UserDao": {
      "type": "object",
      "title": "Respose will return login result and the user info.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "isDeleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModified"
        },
        "role_ids": {
          "$ref": "#/definitions/UUIDs"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "UserHostedDb": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "CurrentHostServerID": {
          "type": "integer",
          "format": "int32"
        },
        "CurrentKubeClusterID": {
          "type": "integer",
          "format": "int32"
        },
        "DbPlatformID": {
          "type": "integer",
          "format": "int32"
        },
        "Fqdn": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "int32"
        },
        "LastModified": {
          "type": "string",
          "format": "date-time"
        },
        "ListenPort": {
          "type": "integer",
          "format": "int32"
        },
        "PriceTierCodeID": {
          "type": "integer",
          "format": "int32"
        },
        "PrivateIpAddress": {
          "type": "string"
        },
        "PubIpAddress": {
          "type": "string"
        },
        "UserApplicationIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "UserID": {
          "type": "integer",
          "format": "int32"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_crud_svc"
    },
    "UserLoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/authapi"
    },
    "UserPasswordUpdateResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "success": {
          "type": "boolean",
          "x-go-name": "Success"
        },
        "targetUserId": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TargetUserId"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UserRoleDao": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "newUserRoleInfo": {
          "$ref": "#/definitions/UserRoleDao"
        }
      },
      "x-go-name": "CreateUserRoleResponse",
      "x-go-package": "github.com/babbage88/go-infra/webapi/user_api_handlers"
    },
    "UserSecretEntry": {
      "type": "object",
      "properties": {
        "appInfo": {
          "$ref": "#/definitions/ExternalApplicationInfo"
        },
        "secretMetadata": {
          "$ref": "#/definitions/ExternalAppSecretMetadata"
        }
      },
      "x-go-package": "github.com/babbage88/go-infra/services/user_secrets"
    }
  },
  "responses": {
    "AuthToken": {
      "description": "Respose will return login result and the user info.",
      "headers": {
        "expiration": {
          "type": "string",
          "format": "date-time"
        },
        "refreshToken": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "CertificateData": {
      "description": "(empty)",
      "headers": {
        "cert_pem": {
          "type": "string"
        },
        "chain_pem": {
          "type": "string"
        },
        "domainName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fullchain_pem": {
          "type": "string"
        },
        "priv_key": {
          "type": "string"
        },
        "s3DownloadUrl": {
          "type": "string"
        },
        "zipDir": {
          "type": "string"
        }
      }
    },
    "CreateAppPermissionResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/AppPermissionDao"
      }
    },
    "CreateRolePermissionMapptingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/RolePermissionMappingDao"
      }
    },
    "CreateUserResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UserDao"
      }
    },
    "CreateUserRoleResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UserRoleDao"
      }
    },
    "EnableDisableUserResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/EnableDisableUserResponse"
      }
    },
    "GetAllAppPermissionsResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/GetAllAppPermissionsResponse"
      },
      "headers": {
        "body": {}
      }
    },
    "GetAllRolesResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/GetAllRolesResponse"
      },
      "headers": {
        "body": {}
      }
    },
    "GetAllUsersResponse": {
      "description": "(empty)",
      "headers": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDao"
          }
        }
      }
    },
    "GetUserByIdResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/GetUserByIdResponse"
      }
    },
    "GetUserSecretEntriesResponse": {
      "description": "(empty)",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/UserSecretEntry"
        }
      }
    },
    "RetrievedSecretResponse": {
      "description": "(empty)",
      "schema": {
        "type": "object",
        "properties": {
          "expiration": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Expiration"
          },
          "external_application_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ExternalApplication"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UserID"
          }
        }
      }
    },
    "SoftDeleteUserByIdResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/SoftDeleteUserByIdResponse"
      }
    },
    "UpdateUserRoleMappingResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UpdateUserRoleMappingResponse"
      }
    },
    "UserPasswordUpdateResponse": {
      "description": "(empty)",
      "schema": {
        "$ref": "#/definitions/UserPasswordUpdateResponse"
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}