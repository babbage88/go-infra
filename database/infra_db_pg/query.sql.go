// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package infra_db_pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password,
    email,
    role
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, password, email, role, created_at, last_modified
`

type CreateUserParams struct {
	Username pgtype.Text
	Password pgtype.Text
	Email    pgtype.Text
	Role     pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const updateUserEmailById = `-- name: UpdateUserEmailById :one
UPDATE users
  set email = $2
WHERE id = $1
RETURNING id, username, password, email, role, created_at, last_modified
`

type UpdateUserEmailByIdParams struct {
	ID    int32
	Email pgtype.Text
}

func (q *Queries) UpdateUserEmailById(ctx context.Context, arg UpdateUserEmailByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmailById, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const updateUserPasswordById = `-- name: UpdateUserPasswordById :one
UPDATE users
  set password = $2
WHERE id = $1
RETURNING id, username, password, email, role, created_at, last_modified
`

type UpdateUserPasswordByIdParams struct {
	ID       int32
	Password pgtype.Text
}

func (q *Queries) UpdateUserPasswordById(ctx context.Context, arg UpdateUserPasswordByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPasswordById, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const updateUserRoleById = `-- name: UpdateUserRoleById :one
UPDATE users
  set email = $2
WHERE id = $1
RETURNING id, username, password, email, role, created_at, last_modified
`

type UpdateUserRoleByIdParams struct {
	ID    int32
	Email pgtype.Text
}

func (q *Queries) UpdateUserRoleById(ctx context.Context, arg UpdateUserRoleByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRoleById, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}
